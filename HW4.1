import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def rotation_matrix_to_axis_angle(R):
    """Convert a rotation matrix to its axis-angle representation, handling singularities."""
    r11, r22, r33 = R[0, 0], R[1, 1], R[2, 2]

    # Calculate the sum r11 + r22 + r33
    trace_sum = r11 + r22 + r33
    print("Sum of diagonal elements (r11 + r22 + r33):", trace_sum)

    # Calculate theta using the cosine equation
    theta = np.arccos((trace_sum - 1) / 2)

    # Check for singularities (sin(theta) == 0)
    if np.isclose(np.sin(theta), 0):  # Using np.isclose for numerical stability
        k = int(round(theta / np.pi))  # Find the integer multiplier k

        if k % 2 == 0:
            print("R = I, undefined axis of rotation (k is even).")
            omega = np.array([0, 0, 0])  # Undefined axis
            return omega, theta, None, None

        else:  # k is odd
            print("θ is an odd multiple of π.")
            # Here we calculate ω using the provided R
            wx, wy, wz = calculate_omega(R)  # Use the new function to get omega
            theta = np.pi  # Set theta to π since that’s the case
            return np.array([wx, wy, wz]), theta, None, None

    else:
        # Even Cases
        skew_symmetric = (R - R.T) / (2 * np.sin(theta))
        omega = np.array([skew_symmetric[2, 1], skew_symmetric[0, 2], skew_symmetric[1, 0]])
        return omega, theta, None, None

def calculate_omega(R):
    # Extract components of R to compute omega
    wx = np.sqrt((R[0, 0] + 1) / 2)
    wy = np.sqrt((R[1, 1] + 1) / 2)
    wz = np.sqrt((R[2, 2] + 1) / 2)

    # Ensure the signs of wx, wy, wz are consistent with R
    if R[1, 0] < 0:
        wx = -wx
    if R[0, 1] < 0:
        wy = -wy
    if R[0, 2] < 0:
        wz = -wz

    return wx, wy, wz

def supplementary_axis(omega):
    """Calculate the supplementary axis of rotation."""
    if np.all(omega == 0):
        return np.array([0, 0, 0])  # Undefined axis case

    return omega  # Supplementary axis remains the same

def plot_axis(omega, origin=np.array([0, 0, 0]), length=2):
    """Plot the rotation axis in the fixed coordinate frame."""
    if np.all(omega == 0):
        return  # Skip plotting if the axis is undefined

    omega_normalized = omega / np.linalg.norm(omega)
    axis_point = origin + omega_normalized * length

    ax = plt.figure().add_subplot(111, projection='3d')
    ax.quiver(*origin, *(axis_point - origin), color='b', length=1, label='Rotation Axis')
    ax.set_xlim([-2, 2])
    ax.set_ylim([-2, 2])
    ax.set_zlim([-2, 2])
    ax.set_xlabel('X-axis')
    ax.set_ylabel('Y-axis')
    ax.set_zlabel('Z-axis')
    ax.set_title('Rotation Axis in Fixed Frame')
    ax.legend()
    plt.grid()
    plt.show()

# User input for the rotation matrix
input_matrix = input("Enter a 3x3 rotation matrix (elements separated by spaces, rows separated by semicolons):\n")
# Convert the input string to a NumPy array
R_s_a = np.array([[float(num) for num in row.split()] for row in input_matrix.strip().split(';')])

# Get axis-angle representation and plot
omega, theta, _, _ = rotation_matrix_to_axis_angle(R_s_a)

if omega is not None and not np.all(omega == 0):
    # Calculate the supplementary angle
    theta_supplementary = 2 * np.pi - theta if theta < 2 * np.pi else None
    supplementary_omega = -supplementary_axis(omega)

    print("Primary axis of rotation (omega):", omega)
    print("Angle of rotation (theta in radians):", theta)
    print("Supplementary angle of rotation (theta in radians):", theta_supplementary)
    print("Angle of rotation (theta in degrees):", np.degrees(theta))

    if theta_supplementary is not None:
        print("Supplementary angle of rotation (theta in degrees):", np.degrees(theta_supplementary))
        print("Supplementary axis of rotation (omega):", supplementary_omega)

    plot_axis(omega)
else:
    print("The rotation matrix corresponds to the identity or an undefined axis.")
